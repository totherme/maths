* Maths

  A place to play with silly little problems.
** Stacks of scales

   Imagine a stack of electronic scales, with a rock on top. The
   read-out on the top scale shows the weight of the rock. The
   second-top scale shows the weight of the rock plus the weight of
   the top scale, and so on.

   Given a list of the readouts from the scales, can we get a list of
   weights of the scales themselves?

   Well, almost. We have no way of knowing the weight of the bottom
   scale in the stack, but we can calculate all the weight of every
   other scale by subtracting its own reading from the reading of the
   scale beneath it. It feels like we ought to be able to write this
   in one line of haskell:

   #+BEGIN_SRC haskell
     foldPairWise (-) readings
   #+END_SRC

   ...using some magical function:

   #+BEGIN_SRC haskell
     foldPairWise :: (a -> a -> a) -> [a] -> [a]
   #+END_SRC

   This function ought to take a list of items, and apply a binary
   operator to each adjacent pair, leaving us with a slightly shorter
   list of results, for example like so:

   #+BEGIN_SRC haskell
     foldPairWise (+) [x1,x2,x3,x4,x5]

     input  = [ x1 , x2 , x3 , x4 , x5 ]
                  \ /  \ /  \ /  \ /
                   +    +    +    +
                   |    |    |    |
     output =   [ y1 , y2 , y3 , y4  ]
     where
       y1 = x1 + x2
       y2 = x2 + x3
       y3 = x3 + x4
       y4 = x4 + x5
   #+END_SRC

   I couldn't find this function on hoogle, so I tried writing it. You
   can see how I went about it in the commit history of [[src/Lib.hs]].

   Of course, we don't need to limit ourselves to binary operators
   whose return types match their arguments. For example,
   ~foldPairWise (/=)~ could be used to detect changes in streams of
   usually-stable data. So, perhaps the type of the function we want is:

   #+BEGIN_SRC haskell
     foldPairWise :: (a -> a -> b) -> [a] -> [b]
   #+END_SRC

   But most of the work of this function can be accomplished by
   ~foldr~... Do we really need the ~List~ type at all? It turns out
   not -- thanks to the [[http://hackage.haskell.org/package/unfoldable-0.9.6/docs/Data-Unfoldable.html][unfoldable]] library by Sjoerd Visscher. We can
   write what we want in such a way that it will work on trees, or
   anything else that can be folded and unfolded:

   #+BEGIN_SRC haskell
     foldPairWise :: (Foldable t , Unfoldable t) => (a -> a -> b) -> t a -> t b
   #+END_SRC

   By the time we get this generic, the function stopped being quite
   so obvious, at least to me. So the [[test/Spec.hs][test suite]] contains the original
   naive definition for use as a spec. We can use quickcheck to test
   that the generic function can at least do everything the naive one
   can.
